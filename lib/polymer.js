"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fspath = require("path");
const fs = require("fs");
const dopees_chain_1 = require("dopees-chain");
const dopees_chain_sass_1 = require("dopees-chain-sass");
const dopees_chain_pug_1 = require("dopees-chain-pug");
const dopees_chain_typescript_1 = require("dopees-chain-typescript");
const babel = require("@babel/core");
const traverse_1 = require("@babel/traverse");
const mkdirp = require("mkdirp");
const mkdirrec = (path) => new Promise((resolve, reject) => mkdirp(path, (err, res) => err ? reject(err) : resolve(res)));
const fsp = fs.promises;
const fsmtime = (path) => fsp.stat(path).then(stats => stats.mtime, () => null);
const toAbsolutePath = (path, base) => {
    if (fspath.isAbsolute(path)) {
        return fspath.normalize(path);
    }
    return fspath.normalize(fspath.join(base, path));
};
const findAllDependencies = (ast, action) => {
    return traverse_1.default(ast, {
        ImportDeclaration(path) {
            const node = path.node;
            action(node.source.value);
        },
        ExportDeclaration(path) {
            const node = path.node;
            if ('ExportNamedDeclaration' === node.type) {
                const n = node;
                if (n.source) {
                    action(n.source.value);
                }
            }
        }
    });
};
const keyDeepDependencies = 'polymer.deep.depepndencies';
async function resolveDeep(targetRoot, npmRoot, context, toCopy, path) {
    const mtime = await fsmtime(path);
    if (!mtime) {
        throw new Error(`failed to get mtime for ${path}`);
    }
    let deps;
    const entry = await context.storage.getObject(`!${keyDeepDependencies}!${path}`);
    if (entry && entry.mtime >= mtime) {
        deps = entry.deps;
    }
    else {
        // already parsed?
        let ast;
        const entry = await context.storage.getObject(`!polymer.deep.ast!${path}`);
        if (entry && entry.mtime >= mtime) {
            ast = entry.ast;
        }
        else {
            const babelOptions = {
                filename: path,
                ast: true,
                root: npmRoot,
                rootMode: 'root',
                plugins: ['@babel/syntax-dynamic-import'],
                parserOpts: {
                    sourceType: 'module'
                }
            };
            const sourceCode = await context.getContents(dopees_chain_1.Task.file(path), 'utf-8');
            ast = await babel.parseAsync(sourceCode, babelOptions);
            await context.storage.setObject(`!polymer.deep.ast!${path}`, { mtime, ast });
        }
        // get dependencies
        deps = [];
        findAllDependencies(ast, dep => deps.push(dep));
        await context.storage.setObject(`!${keyDeepDependencies}!${path}`, { mtime, deps });
    }
    // process dependencies
    const deepDependencies = [];
    for (const localPath of deps) {
        if (localPath.startsWith('./') || localPath.startsWith('../')) {
            // in-package dependency
            let source = fspath.normalize(fspath.join(fspath.dirname(path), localPath));
            if (!source.endsWith('.js')) {
                source += '.js';
            }
            if (!toCopy.some(e => e.source === source)) {
                const target = fspath.normalize(fspath.join(targetRoot, fspath.relative(npmRoot, source)));
                toCopy.push({ source, target });
                deepDependencies.push(source);
            }
        }
        else {
            // external dependency
            let source = fspath.normalize(fspath.join(npmRoot, localPath));
            if (!source.endsWith('.js')) {
                source += '.js';
            }
            if (!toCopy.some(e => e.source === source)) {
                let target = fspath.normalize(fspath.join(targetRoot, fspath.relative(npmRoot, source)));
                // same folder dependencies must start with './'
                if (!target.startsWith('..')) {
                    target = './' + target;
                }
                toCopy.push({ source, target });
                deepDependencies.push(source);
            }
        }
    }
    // trigger deep resolve
    await Promise.all(deepDependencies.map(path => resolveDeep(targetRoot, npmRoot, context, toCopy, path)));
}
function unique(source) {
    const result = [];
    for (const item of source) {
        if (!result.some(i => i === item)) {
            result.push(item);
        }
    }
    return result;
}
function deploy(opts) {
    const { targetRoot, buildTaskName, allDependenciesKey } = opts;
    return async (task, context) => {
        if (task.name instanceof dopees_chain_1.LogicalName && task.name.name === buildTaskName) {
            const deps = await context.storage.getObject(allDependenciesKey);
            if (!deps) {
                throw new Error('no dependencies has been populated');
            }
            const root = context.basePath;
            const npmRoot = fspath.join(root, 'node_modules');
            // flatten dependencies
            const toCopy = [];
            // const imports: Array<{ name: string, target: string }> = [];
            context.log('deploy', task, 'resolving source dependencies...');
            const allSources = unique(deps.map(dep => dep.source));
            for (const entry of deps) {
                for (const dep of entry.dependencies) {
                    const possibleSource = fspath.normalize(fspath.join(fspath.dirname(entry.source), dep));
                    if (!allSources.some(x => x === possibleSource)) {
                        const dependency = fspath.relative(targetRoot, possibleSource);
                        let mtime;
                        // try js in modules
                        let candidate = fspath.join(npmRoot, dependency);
                        mtime = await fsmtime(candidate);
                        if (!mtime) {
                            throw new Error(`unable to resolve ${dependency}`);
                        }
                        const target = fspath.join(targetRoot, dependency);
                        toCopy.push({
                            source: candidate,
                            target
                        });
                    }
                }
            }
            // context.log('deploy', task, 'done updating dependency imports');
            context.log('deploy', task, 'done resolving source dependencies');
            // resolve deep dependencies
            context.log('deploy', task, 'resolving deep dependencies...');
            await Promise.all(toCopy.map(e => resolveDeep(targetRoot, npmRoot, context, toCopy, e.source)));
            context.log('deploy', task, 'done resolving deep dependencies');
            // copy dependencies
            context.log('deploy', task, 'copying dependencies...');
            const created = new Set();
            await Promise.all(toCopy.map(async (e) => {
                const folder = fspath.dirname(e.target);
                if (!created.has(folder)) {
                    await mkdirrec(folder);
                    created.add(folder);
                }
                await fsp.copyFile(e.source, e.target);
            }));
            context.log('deploy', task, 'done copying dependencies');
        }
    };
}
class PolymerProject {
    constructor(config) {
        this.taskName = 'dopees-polymer';
        this.cwd = config.cwd || process.cwd();
        this.buildRoot = toAbsolutePath(config.buildRoot || './.build', this.cwd);
        this.sourceRoot = toAbsolutePath(config.sourceRoot, this.cwd);
        this.targetRoot = toAbsolutePath(config.targetRoot, this.cwd);
        this.application = config.application !== false;
    }
    async getTargets() {
        const targets = [];
        const traverse = async (subpath) => {
            const names = await fsp.readdir(fspath.join(this.sourceRoot, subpath));
            for (const name of names) {
                const sourcePath = fspath.normalize(fspath.join(this.sourceRoot, subpath, name));
                const stats = await fsp.stat(sourcePath).catch(() => null);
                if (stats) {
                    if (stats.isDirectory()) {
                        await traverse(fspath.normalize(fspath.join(subpath, name)));
                    }
                    else if (sourcePath.endsWith('.ts') && !sourcePath.endsWith('.d.ts')) {
                        const targetPath = fspath.normalize(fspath.join(this.targetRoot, fspath.relative(this.sourceRoot, sourcePath))).replace(/\.ts$/, '.js');
                        targets.push({ path: targetPath, base: this.cwd });
                    }
                }
            }
        };
        await traverse('.');
        return targets;
    }
    createExecutor() {
        const pugSourceResolver = dopees_chain_1.ReversePathResolver.from({
            sourceRoot: fspath.relative(this.cwd, this.sourceRoot),
            targetRoot: fspath.relative(this.cwd, this.buildRoot),
            sourceExt: 'pug',
            targetExt: 'html'
        });
        const executors = [
            dopees_chain_sass_1.sass({
                sourceRoot: fspath.relative(this.cwd, this.sourceRoot),
                targetRoot: fspath.relative(this.cwd, this.buildRoot),
                sourceExt: 'scss',
                targetExt: 'css',
                outputStyle: 'compressed'
            }),
            dopees_chain_pug_1.pug({
                inlineCss: true,
                targetRoot: fspath.relative(this.cwd, this.buildRoot),
                sourceResolver: (path, base) => {
                    const source = pugSourceResolver(path, base);
                    if (!source) {
                        throw new Error(`unable to resolve source for ${path} (base = ${base})`);
                    }
                    return source;
                }
            }),
            dopees_chain_typescript_1.dopees({
                sourceRoot: fspath.relative(this.cwd, this.sourceRoot),
                buildRoot: fspath.relative(this.cwd, this.buildRoot),
                targetRoot: fspath.relative(this.cwd, this.targetRoot),
                saveAllDependencies: true,
                allDependenciesKey: 'dopees.polymer.dependencies',
                updateExternalImports: this.application
            }),
            async (task, context) => {
                if (task.name instanceof dopees_chain_1.LogicalName && task.name.name === this.taskName) {
                    const targets = await this.getTargets();
                    await Promise.all(targets.map(target => context.execute(dopees_chain_1.Task.file(target.path, target.base))));
                }
            }
        ];
        if (this.application) {
            executors.push(deploy({
                targetRoot: this.targetRoot,
                allDependenciesKey: 'dopees.polymer.dependencies',
                buildTaskName: this.taskName
            }));
        }
        return dopees_chain_1.Executors.combine(executors);
    }
}
exports.PolymerProject = PolymerProject;
//# sourceMappingURL=data:application/json;base64,